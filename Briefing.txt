
-Layout (Ferramenta Mockflow) 
-Cores  (Adobe Color)
-Fonte  (Google Fonts)

Inspirações:
https://confeitariaberola.com/site/content/home/
https://www.imperatrizdocesfinos.com.br/
https://padokafloripa.com.br/




/my-app
├── /public               # arquivos estáticos (html, css, js, img)
├── /src
│   ├── /controllers      # lógica das rotas
│   ├── /routes           # definição das rotas
│   ├── /services         # lógica de negócio (opcional)
│   ├── /middlewares      # autenticação, validação, etc
│   ├── /prisma
│   │   ├── client.js     # cliente Prisma instanciado
│   │   └── schema.prisma
│   └── /utils            # funções utilitárias
├── .env                  # variáveis de ambiente (ex: DB_URL)
├── package.json
├── prisma/
│   └── schema.prisma     # definição dos modelos Prisma
└── index.js              # arquivo principal do servidor





Ótimo! Como você respondeu "sim", vou seguir com a **autenticação com JWT para funcionários**, que é uma base importante para proteger rotas como criação de pedidos, produtos etc.

---

## 🔐 Autenticação com JWT para Funcionários

### ✅ Visão geral

* Login com CPF e senha
* Geração de token JWT
* Middleware para proteger rotas
* Criação de senhas com hash (**bcrypt**)

---

## 1. Instalar dependências

```bash
npm install jsonwebtoken bcryptjs
```

---

## 2. Atualizar o modelo `Funcionario` no Prisma

Abra `prisma/schema.prisma` e adicione o campo `senha`:

```prisma
model Funcionario {
  id               Int      @id @default(autoincrement())
  nome             String
  cpf              String   @unique
  telefone         String?
  email            String?
  cargo            String
  dataContratacao  DateTime
  salario          Float
  senha            String   // <- novo campo
}
```

### Atualize o banco:

```bash
npx prisma migrate dev --name add_senha_funcionario
```

---

## 3. Criar o `authController`

### `src/controllers/authController.js`

```js
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();
const SECRET = process.env.JWT_SECRET || 'padaria_segura';

module.exports = {
  async login(req, res) {
    const { cpf, senha } = req.body;

    const funcionario = await prisma.funcionario.findUnique({ where: { cpf } });
    if (!funcionario) {
      return res.status(404).json({ error: 'Funcionário não encontrado' });
    }

    const senhaValida = await bcrypt.compare(senha, funcionario.senha);
    if (!senhaValida) {
      return res.status(401).json({ error: 'Senha incorreta' });
    }

    const token = jwt.sign(
      { id: funcionario.id, nome: funcionario.nome, cargo: funcionario.cargo },
      SECRET,
      { expiresIn: '8h' }
    );

    res.json({ token });
  }
};
```

---

## 4. Rota de login

### `src/routes/authRoutes.js`

```js
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/login', authController.login);

module.exports = router;
```

Adicione ao `app.js`:

```js
const authRoutes = require('./routes/authRoutes');
app.use('/auth', authRoutes);
```

---

## 5. Middleware de autenticação

### `src/middleware/verifyToken.js`

```js
const jwt = require('jsonwebtoken');
const SECRET = process.env.JWT_SECRET || 'padaria_segura';

module.exports = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader)
    return res.status(401).json({ error: 'Token não fornecido' });

  const [, token] = authHeader.split(' ');

  try {
    const decoded = jwt.verify(token, SECRET);
    req.funcionario = decoded;
    next();
  } catch (err) {
    return res.status(401).json({ error: 'Token inválido' });
  }
};
```

---

## 6. Exemplo de uso em rota protegida

```js
const verifyToken = require('../middleware/verifyToken');

// em app.js ou produtoRoutes.js
router.post('/protegido', verifyToken, (req, res) => {
  res.json({ msg: `Olá, ${req.funcionario.nome}. Você está autenticado!` });
});
```

---

## 7. Cadastro de funcionários com senha (criptografada)

### Exemplo: `funcionarioController.store`

```js
const bcrypt = require('bcryptjs');

async store(req, res) {
  const { nome, cpf, telefone, email, cargo, dataContratacao, salario, senha } = req.body;

  const hash = await bcrypt.hash(senha, 8);

  const funcionario = await prisma.funcionario.create({
    data: { nome, cpf, telefone, email, cargo, dataContratacao: new Date(dataContratacao), salario, senha: hash }
  });

  res.status(201).json(funcionario);
}
```

---

## ✅ Pronto!

Agora você tem:

* Login com JWT
* Middleware para proteger rotas
* Criação segura de funcionários

---

### Deseja agora:

* [ ] Criar **CRUD completo de pedidos** (com itens e total calculado)?
* [ ] Criar **CRUD de pagamentos**?
* [ ] Validar dados com Zod?
* [ ] Criar seed de exemplo para testes?

Me diga e sigo com o próximo passo!
